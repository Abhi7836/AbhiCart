{"ast":null,"code":"import axios from 'axios';\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants';\nimport { ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL, ORDER_DETAILS_FAIL, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_REQUEST, ORDER_PAY_FAIL, ORDER_PAY_SUCCESS, ORDER_PAY_REQUEST, ORDER_LIST_MY_REQUEST, ORDER_LIST_MY_SUCCESS, ORDER_LIST_MY_FAIL, ORDER_LIST_FAIL, ORDER_LIST_SUCCESS, ORDER_LIST_REQUEST, ORDER_DELIVER_FAIL, ORDER_DELIVER_SUCCESS, ORDER_DELIVER_REQUEST } from '../constants/orderConstants';\nimport { logout } from './userActions';\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/orders`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: CART_CLEAR_ITEMS,\n      payload: data\n    });\n    localStorage.removeItem('cartItems');\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const getOrderDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/orders/${id}`, config);\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: message\n    });\n  }\n};\nexport const payOrder = (orderId, paymentResult) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_PAY_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/orders/${orderId}/pay`, paymentResult, config);\n    dispatch({\n      type: ORDER_PAY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_PAY_FAIL,\n      payload: message\n    });\n  }\n};\nexport const deliverOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DELIVER_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/orders/${order._id}/deliver`, {}, config);\n    dispatch({\n      type: ORDER_DELIVER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_DELIVER_FAIL,\n      payload: message\n    });\n  }\n};\nexport const listMyOrders = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_LIST_MY_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/orders/myorders`, config);\n    dispatch({\n      type: ORDER_LIST_MY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_LIST_MY_FAIL,\n      payload: message\n    });\n  }\n};\nexport const listOrders = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/orders`, config);\n    dispatch({\n      type: ORDER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_LIST_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["/home/home/Downloads/web_dev_udacity/web_dev_projects/abhicart/frontend/src/actions/orderActions.js"],"names":["axios","CART_CLEAR_ITEMS","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_DETAILS_FAIL","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_REQUEST","ORDER_PAY_FAIL","ORDER_PAY_SUCCESS","ORDER_PAY_REQUEST","ORDER_LIST_MY_REQUEST","ORDER_LIST_MY_SUCCESS","ORDER_LIST_MY_FAIL","ORDER_LIST_FAIL","ORDER_LIST_SUCCESS","ORDER_LIST_REQUEST","ORDER_DELIVER_FAIL","ORDER_DELIVER_SUCCESS","ORDER_DELIVER_REQUEST","logout","createOrder","order","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","post","payload","localStorage","removeItem","error","message","response","getOrderDetails","id","get","payOrder","orderId","paymentResult","put","deliverOrder","_id","listMyOrders","listOrders"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\nimport {\n  ORDER_CREATE_REQUEST,\n  ORDER_CREATE_SUCCESS,\n  ORDER_CREATE_FAIL,\n  ORDER_DETAILS_FAIL,\n  ORDER_DETAILS_SUCCESS,\n  ORDER_DETAILS_REQUEST,\n  ORDER_PAY_FAIL,\n  ORDER_PAY_SUCCESS,\n  ORDER_PAY_REQUEST,\n  ORDER_LIST_MY_REQUEST,\n  ORDER_LIST_MY_SUCCESS,\n  ORDER_LIST_MY_FAIL,\n  ORDER_LIST_FAIL,\n  ORDER_LIST_SUCCESS,\n  ORDER_LIST_REQUEST,\n  ORDER_DELIVER_FAIL,\n  ORDER_DELIVER_SUCCESS,\n  ORDER_DELIVER_REQUEST,\n} from '../constants/orderConstants'\nimport { logout } from './userActions'\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n  try {dispatch({type: ORDER_CREATE_REQUEST,})\n    const {userLogin: { userInfo },} = getState()\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n    const { data } = await axios.post(`/api/orders`, order, config)\n    dispatch({type: ORDER_CREATE_SUCCESS,payload: data,})\n    dispatch({type: CART_CLEAR_ITEMS,payload: data,})\n    localStorage.removeItem('cartItems')\n  }catch (error) {\n    const message =error.response && error.response.data.message\n        ? error.response.data.message: error.message\n    if (message === 'Not authorized, token failed') {dispatch(logout())}\n    dispatch({type: ORDER_CREATE_FAIL,payload: message,})\n  }\n}\n\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\n  try {dispatch({type: ORDER_DETAILS_REQUEST,})\n    const {userLogin: { userInfo },} = getState()\n    const config = {headers: {Authorization: `Bearer ${userInfo.token}`,},}\n    const { data } = await axios.get(`/api/orders/${id}`, config)\n    dispatch({type: ORDER_DETAILS_SUCCESS,payload: data,})\n  } catch (error) {\n    const message =error.response && error.response.data.message\n        ? error.response.data.message: error.message\n    if (message === 'Not authorized, token failed') {dispatch(logout())}\n    dispatch({type: ORDER_DETAILS_FAIL,payload: message,})\n  }\n}\n\nexport const payOrder = (orderId, paymentResult) => async (dispatch,getState) => {\n  try {\n    dispatch({type: ORDER_PAY_REQUEST,})\n    const {userLogin: { userInfo },} = getState()\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },}\n    const { data } = await axios.put(`/api/orders/${orderId}/pay`,paymentResult,config)\n    dispatch({type: ORDER_PAY_SUCCESS,payload: data,})\n  } catch (error) {\n    const message =error.response && error.response.data.message\n        ?error.response.data.message: error.message\n    if (message === 'Not authorized, token failed') {dispatch(logout())}\n    dispatch({type: ORDER_PAY_FAIL,payload: message,})\n  }\n}\n\nexport const deliverOrder = (order) => async (dispatch, getState) => {\n  try {dispatch({type: ORDER_DELIVER_REQUEST,})\n    const {userLogin: { userInfo },} = getState()\n    const config = {\n      headers: {Authorization: `Bearer ${userInfo.token}`,},\n    }\n    const { data } = await axios.put(`/api/orders/${order._id}/deliver`,{},config)\n    dispatch({type: ORDER_DELIVER_SUCCESS,payload: data,})\n  } catch (error) {\n    const message =error.response && error.response.data.message\n        ? error.response.data.message: error.message\n    if (message === 'Not authorized, token failed') {dispatch(logout())}\n    dispatch({type: ORDER_DELIVER_FAIL,payload: message,})\n  }\n}\n\nexport const listMyOrders = () => async (dispatch, getState) => {\n  try {dispatch({type: ORDER_LIST_MY_REQUEST,})\n    const {userLogin: { userInfo },} = getState()\n    const config = {\n      headers: {Authorization: `Bearer ${userInfo.token}`,},\n    }\n    const { data } = await axios.get(`/api/orders/myorders`, config)\n    dispatch({type: ORDER_LIST_MY_SUCCESS,payload: data,})\n  } catch (error) {\n    const message =error.response && error.response.data.message\n        ? error.response.data.message : error.message\n    if (message === 'Not authorized, token failed') {dispatch(logout())}\n    dispatch({type: ORDER_LIST_MY_FAIL,payload: message,})\n  }\n}\n\nexport const listOrders = () => async (dispatch, getState) => {\n  try {dispatch({type: ORDER_LIST_REQUEST,})\n    const {userLogin: { userInfo },} = getState()\n    const config = {\n      headers: { Authorization: `Bearer ${userInfo.token}`,},\n    }\n    const { data } = await axios.get(`/api/orders`, config)\n    dispatch({type: ORDER_LIST_SUCCESS,payload: data,})\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message: error.message\n    if (message === 'Not authorized, token failed') {dispatch(logout())}\n    dispatch({type: ORDER_LIST_FAIL,payload: message,})\n  }\n}"]},"metadata":{},"sourceType":"module"}